
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainScalarFieldEnum = {
  id: 'id',
  url: 'url',
  context: 'context',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  location: 'location',
  customKeywords: 'customKeywords',
  intentPhrases: 'intentPhrases',
  chatModel: 'chatModel',
  runAllModels: 'runAllModels',
  locationContext: 'locationContext'
};

exports.Prisma.CrawlResultScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  pagesScanned: 'pagesScanned',
  analyzedUrls: 'analyzedUrls',
  extractedContext: 'extractedContext',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt'
};

exports.Prisma.KeywordScalarFieldEnum = {
  id: 'id',
  term: 'term',
  volume: 'volume',
  difficulty: 'difficulty',
  cpc: 'cpc',
  intent: 'intent',
  domainId: 'domainId',
  isSelected: 'isSelected',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PhraseScalarFieldEnum = {
  id: 'id',
  text: 'text',
  keywordId: 'keywordId',
  relevanceScore: 'relevanceScore',
  sources: 'sources',
  trend: 'trend',
  intent: 'intent',
  confidence: 'confidence',
  isSelected: 'isSelected',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIQueryResultScalarFieldEnum = {
  id: 'id',
  phraseId: 'phraseId',
  model: 'model',
  response: 'response',
  latency: 'latency',
  cost: 'cost',
  presence: 'presence',
  relevance: 'relevance',
  accuracy: 'accuracy',
  sentiment: 'sentiment',
  overall: 'overall',
  createdAt: 'createdAt'
};

exports.Prisma.DashboardAnalysisScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  metrics: 'metrics',
  insights: 'insights',
  industryAnalysis: 'industryAnalysis',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompetitorAnalysisScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  competitors: 'competitors',
  marketInsights: 'marketInsights',
  strategicRecommendations: 'strategicRecommendations',
  competitiveAnalysis: 'competitiveAnalysis',
  competitorList: 'competitorList',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SuggestedCompetitorScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  name: 'name',
  competitorDomain: 'competitorDomain',
  reason: 'reason',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.AnalysisPhaseScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  phase: 'phase',
  status: 'status',
  progress: 'progress',
  startTime: 'startTime',
  endTime: 'endTime',
  result: 'result',
  error: 'error',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SemanticAnalysisScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  contentSummary: 'contentSummary',
  keyThemes: 'keyThemes',
  brandVoice: 'brandVoice',
  targetAudience: 'targetAudience',
  contentGaps: 'contentGaps',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KeywordAnalysisScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  keywords: 'keywords',
  searchVolumeData: 'searchVolumeData',
  intentClassification: 'intentClassification',
  competitiveAnalysis: 'competitiveAnalysis',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SearchVolumeClassificationScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  highVolumeKeywords: 'highVolumeKeywords',
  mediumVolumeKeywords: 'mediumVolumeKeywords',
  lowVolumeKeywords: 'lowVolumeKeywords',
  volumeTrends: 'volumeTrends',
  seasonalPatterns: 'seasonalPatterns',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IntentClassificationScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  informationalKeywords: 'informationalKeywords',
  navigationalKeywords: 'navigationalKeywords',
  transactionalKeywords: 'transactionalKeywords',
  commercialKeywords: 'commercialKeywords',
  intentDistribution: 'intentDistribution',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunityInsightScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  keywordId: 'keywordId',
  sources: 'sources',
  summary: 'summary',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt'
};

exports.Prisma.SearchPatternScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  keywordId: 'keywordId',
  patterns: 'patterns',
  summary: 'summary',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt'
};

exports.Prisma.PhraseIntentClassificationScalarFieldEnum = {
  id: 'id',
  phraseId: 'phraseId',
  intent: 'intent',
  confidence: 'confidence',
  createdAt: 'createdAt'
};

exports.Prisma.PhraseScoreScalarFieldEnum = {
  id: 'id',
  phraseId: 'phraseId',
  score: 'score',
  breakdown: 'breakdown',
  createdAt: 'createdAt'
};

exports.Prisma.IntentPhraseGenerationScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  status: 'status',
  phase: 'phase',
  progress: 'progress',
  startTime: 'startTime',
  endTime: 'endTime',
  result: 'result',
  error: 'error',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommunityMiningResultScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  keywordId: 'keywordId',
  platform: 'platform',
  insights: 'insights',
  sentiment: 'sentiment',
  frequency: 'frequency',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt'
};

exports.Prisma.SearchPatternResultScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  keywordId: 'keywordId',
  patterns: 'patterns',
  volume: 'volume',
  seasonality: 'seasonality',
  trends: 'trends',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt'
};

exports.Prisma.IntentClassificationResultScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  keywordId: 'keywordId',
  intent: 'intent',
  confidence: 'confidence',
  patterns: 'patterns',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt'
};

exports.Prisma.GeneratedIntentPhraseScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  keywordId: 'keywordId',
  phrase: 'phrase',
  relevanceScore: 'relevanceScore',
  intent: 'intent',
  intentConfidence: 'intentConfidence',
  sources: 'sources',
  trend: 'trend',
  communityInsights: 'communityInsights',
  searchPatterns: 'searchPatterns',
  isSelected: 'isSelected',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RelevanceScoreResultScalarFieldEnum = {
  id: 'id',
  domainId: 'domainId',
  phraseId: 'phraseId',
  score: 'score',
  breakdown: 'breakdown',
  factors: 'factors',
  tokenUsage: 'tokenUsage',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Domain: 'Domain',
  CrawlResult: 'CrawlResult',
  Keyword: 'Keyword',
  Phrase: 'Phrase',
  AIQueryResult: 'AIQueryResult',
  DashboardAnalysis: 'DashboardAnalysis',
  CompetitorAnalysis: 'CompetitorAnalysis',
  SuggestedCompetitor: 'SuggestedCompetitor',
  AnalysisPhase: 'AnalysisPhase',
  SemanticAnalysis: 'SemanticAnalysis',
  KeywordAnalysis: 'KeywordAnalysis',
  SearchVolumeClassification: 'SearchVolumeClassification',
  IntentClassification: 'IntentClassification',
  CommunityInsight: 'CommunityInsight',
  SearchPattern: 'SearchPattern',
  PhraseIntentClassification: 'PhraseIntentClassification',
  PhraseScore: 'PhraseScore',
  IntentPhraseGeneration: 'IntentPhraseGeneration',
  CommunityMiningResult: 'CommunityMiningResult',
  SearchPatternResult: 'SearchPatternResult',
  IntentClassificationResult: 'IntentClassificationResult',
  GeneratedIntentPhrase: 'GeneratedIntentPhrase',
  RelevanceScoreResult: 'RelevanceScoreResult'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
